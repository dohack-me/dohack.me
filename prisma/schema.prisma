// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Category {
  CRYPTO
  FORENSICS
  WEB
  REV
  PWN
  MISC
}

model Repositories {
  id               String       @id @unique @default(uuid()) @db.Uuid
  name             String
  sourceLink       String
  organization     String
  organizationLink String
  challenges       Challenges[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("repositories")
}

model Challenges {
  id          String   @id @unique @default(uuid()) @db.Uuid
  name        String   @unique
  description String
  category    Category
  answer      String
  authors     String[]

  solves   Solves[]
  websites Websites[]
  sockets  Sockets[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  repositoryId String @db.Uuid

  repository Repositories @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("challenges")
}

model Websites {
  id               String             @id @unique @default(uuid()) @db.Uuid
  image            String
  tag              String
  websiteInstances WebsiteInstances[]

  challengeId String @db.Uuid

  challenge Challenges @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@map("websites")
}

model Sockets {
  id              String            @id @unique @default(uuid()) @db.Uuid
  image           String
  tag             String
  socketInstances SocketInstances[]

  challengeId String @db.Uuid

  challenge Challenges @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@map("sockets")
}

model WebsiteInstances {
  userId    String @db.Uuid
  websiteId String @db.Uuid
  id        String @db.Uuid
  url       String

  user    Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  website Websites @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@id([userId, websiteId])
  @@map("website_instances")
}

model SocketInstances {
  userId   String @db.Uuid
  socketId String @db.Uuid
  id       String @db.Uuid
  port     Int

  user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  socket Sockets @relation(fields: [socketId], references: [id], onDelete: Cascade)

  @@id([userId, socketId])
  @@map("socket_instances")
}

model Users {
  id               String             @id @unique @db.Uuid
  role             UserRole           @default(USER)
  solves           Solves[]
  websiteInstances WebsiteInstances[]
  socketInstances  SocketInstances[]

  @@map("users")
}

model Solves {
  userId      String @db.Uuid
  challengeId String @db.Uuid

  user      Users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenges @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@id([userId, challengeId])
  @@map("solves")
}
