// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Category {
  CRYPTO
  FORENSICS
  WEB
  REV
  PWN
  MISC
}

enum ServiceType {
  WEBSITE
  SOCKET
}

model Repository {
  id               String  @id @unique @default(uuid()) @db.Uuid
  name             String
  sourceLink       String
  organization     String
  organizationLink String
  visible          Boolean @default(false)

  challenges Challenge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("repository")
}

model Challenge {
  id          String   @id @unique @default(uuid()) @db.Uuid
  name        String
  description String
  category    Category
  answer      String
  authors     String[]
  visible     Boolean  @default(false)

  solves    Solve[]
  services  Service[]
  hints     Hint[]
  bookmarks Bookmark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  repositoryId String @db.Uuid

  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("challenge")
}

model Service {
  id          String      @id @unique @default(uuid()) @db.Uuid
  challengeId String      @db.Uuid
  type        ServiceType
  image       String
  tag         String

  serviceInstances ServiceInstance[]

  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@map("service")
}

model ServiceInstance {
  id        String   @id @unique @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  serviceId String   @db.Uuid
  endpoint  String
  expiry    DateTime

  user    CustomUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service    @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([userId, serviceId])
  @@map("service_instance")
}

model Solve {
  userId      String @db.Uuid
  challengeId String @db.Uuid

  user      CustomUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge  @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@id([userId, challengeId])
  @@map("solve")
}

model Hint {
  id          String @id @unique @default(uuid()) @db.Uuid
  challengeId String @db.Uuid
  title       String
  hint        String

  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@map("hint")
}

model Bookmark {
  userId      String @db.Uuid
  challengeId String @db.Uuid

  user      CustomUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge  @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@id([userId, challengeId])
  @@map("bookmark")
}

model CustomUser {
  id     String   @id @unique @default(uuid()) @db.Uuid
  userId String   @unique
  role   UserRole @default(USER)

  solves           Solve[]
  bookmarks        Bookmark[]
  serviceInstances ServiceInstance[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("custom_user")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customUser CustomUser?

  @@map("user")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}
